{"version":3,"sources":["services/openWeatherService.js","redux/actions.js","components/Search.js","components/Chart.js","App.js","reportWebVitals.js","redux/rootReducer.js","index.js"],"names":["getCityWeather","city","a","axios","get","then","response","data","list","map","item","name","dt_txt","temperature","main","temp","catch","err","Promise","reject","SET_CITY","SET_WEATHER","SET_ERROR","REMOVE_ERROR","setWeather","weather","type","connect","error","dispatch","handleChange","inputValue","editCity","searchCity","e","preventDefault","res","setError","className","onChange","target","value","placeholder","onClick","result","message","status","errorText","ResponsiveContainer","width","height","BarChart","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","barGap","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","state","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAEaA,EAAc,uCAAG,WAAOC,GAAP,SAAAC,EAAA,4DACd,mCADc,SAGfC,IACVC,IADU,6DAE6CH,EAF7C,kBAFC,mCAED,kBAIVI,MAAK,SAACC,GACL,OAAOA,EAASC,KAAKC,KAAKC,KAAI,SAACC,GAAD,MAAW,CACvCC,KAAMD,EAAKE,OACXC,YAAaH,EAAKI,KAAKC,YAG1BC,OAAM,SAACC,GAAD,OAASC,QAAQC,OAAOF,MAbL,mFAAH,sDCFdG,EAAW,WACXC,EAAc,cACdC,EAAY,YACZC,EAAe,eAKfC,EAAa,SAACC,GACzB,MAAO,CAAEC,KAAML,EAAaI,Y,gBC4CfE,eALS,SAAC,GAAD,MAA+B,CACrD1B,KADsB,EAAGA,KAEzB2B,MAFsB,EAASA,MAG/BH,QAHsB,EAAgBA,WAKzBE,EAhDA,SAAC,GAA+B,IAA7B1B,EAA4B,EAA5BA,KAAM2B,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACvBC,EAAe,SAACC,GACpBF,EDFoB,SAAC5B,GACvB,MAAO,CAAEyB,KAAMN,EAAUnB,QCCd+B,CAASD,KAEdE,EAAa,SAACC,GAClBA,EAAEC,iBACFnC,EAAeC,GACZI,MAAK,SAAC+B,GACLP,EAASL,EAAWY,IACpBP,EDCC,CAAEH,KAAMH,OCCVP,OAAM,SAACY,GACNC,EDNgB,SAACD,GACvB,MAAO,CAAEF,KAAMJ,EAAWM,SCKXS,CAAST,IAClBC,EAASL,EAAW,SAW1B,OACE,sBAAKc,UAAU,SAAf,UACE,iCACE,uBACEC,SAAU,SAACL,GAAD,OAAOJ,EAAaI,EAAEM,OAAOC,QACvCf,KAAK,OACLf,KAAK,OACL+B,YAAY,kBACZD,MAAOxC,IAET,wBAAQyB,KAAK,SAASiB,QAAS,SAACT,GAAD,OAAOD,EAAWC,IAAjD,wBAKS,IAAVN,GAAmB,qBAAKU,UAAU,QAAf,mBAvBN,SAACV,GACjB,IAAIgB,EAAM,UAAMhB,EAAMjB,KAAZ,aAAqBiB,EAAMiB,QAA3B,KAIV,OAHIjB,EAAMtB,SAASwC,OAAS,MAC1BF,GAAU,2BAELA,EAkB0CG,CAAUnB,Y,6DCFhDD,eADS,SAAC,GAAD,MAAkB,CAAEF,QAApB,EAAGA,WACZE,EA9BD,SAAC,GAAiB,IAAfF,EAAc,EAAdA,QACf,OACE,qBAAKa,UAAU,QAAf,SACE,cAACU,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,IAA1C,SACE,eAACC,EAAA,EAAD,CACE5C,KAAMkB,EACN2B,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,GANZ,UASE,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,CAAOV,MAAO,KACd,cAACW,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACEJ,QAAQ,cACRK,KAAK,UACLpD,KAAK,cACLqD,OAAQ,gBCnBpB,IACerC,eADS,SAAC,GAAD,MAAkB,CAAEF,QAApB,EAAGA,WACZE,EATf,YAA2B,IAAZF,EAAW,EAAXA,QACb,OACE,sBAAKa,UAAU,YAAf,UACE,cAAC,EAAD,IACCb,EAAQwC,OAAS,GAAK,cAAC,EAAD,UCEdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/D,MAAK,YAAkD,IAA/CgE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCLRO,EAAe,CACnBzE,KAAM,GACNwB,QAAS,GACTG,OAAO,GCKH+C,EAAQC,aDFa,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAC3D,OAAQA,EAAOpD,MACb,KAAKN,EACH,OAAO,2BAAKyD,GAAZ,IAAmB5E,KAAM6E,EAAO7E,OAClC,KAAKoB,EACH,OAAO,2BAAKwD,GAAZ,IAAmBpD,QAASqD,EAAOrD,UACrC,KAAKH,EACH,OAAO,2BAAKuD,GAAZ,IAAmBjD,MAAOkD,EAAOlD,QACnC,KAAKL,EACH,OAAO,2BAAKsD,GAAZ,IAAmBjD,OAAO,IAC5B,QACE,OAAOiD,MCPbE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.a1d307e6.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const getCityWeather = async (city) => {\n  const appId = \"7e5fa846ad285bc10f4916311a521180\";\n\n  return await axios\n    .get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${appId}&units=metric`\n    )\n    .then((response) => {\n      return response.data.list.map((item) => ({\n        name: item.dt_txt,\n        temperature: item.main.temp,\n      }));\n    })\n    .catch((err) => Promise.reject(err));\n};\n","export const SET_CITY = \"SET_CITY\";\nexport const SET_WEATHER = \"SET_WEATHER\";\nexport const SET_ERROR = \"SET_ERROR\";\nexport const REMOVE_ERROR = \"REMOVE_ERROR\";\n\nexport const editCity = (city) => {\n  return { type: SET_CITY, city };\n};\nexport const setWeather = (weather) => {\n  return { type: SET_WEATHER, weather };\n};\nexport const setError = (error) => {\n  return { type: SET_ERROR, error };\n};\nexport const removeError = () => {\n  return { type: REMOVE_ERROR };\n};\n","import React from \"react\";\nimport { getCityWeather } from \"../services/openWeatherService\";\nimport { editCity, setWeather, setError, removeError } from \"../redux/actions\";\nimport { connect } from \"react-redux\";\n\nconst Search = ({ city, error, dispatch }) => {\n  const handleChange = (inputValue) => {\n    dispatch(editCity(inputValue));\n  };\n  const searchCity = (e) => {\n    e.preventDefault();\n    getCityWeather(city)\n      .then((res) => {\n        dispatch(setWeather(res));\n        dispatch(removeError());\n      })\n      .catch((error) => {\n        dispatch(setError(error));\n        dispatch(setWeather([]));\n      });\n  };\n  const errorText = (error) => {\n    let result = `${error.name}. ${error.message}.`;\n    if (error.response.status < 500) {\n      result += \" The city was not found\";\n    }\n    return result;\n  };\n\n  return (\n    <div className=\"search\">\n      <form>\n        <input\n          onChange={(e) => handleChange(e.target.value)}\n          type=\"text\"\n          name=\"city\"\n          placeholder=\"Enter city name\"\n          value={city}\n        />\n        <button type=\"submit\" onClick={(e) => searchCity(e)}>\n          Search\n        </button>\n      </form>\n\n      {error !== false && <div className=\"error\">{`${errorText(error)}`}</div>}\n    </div>\n  );\n};\nconst mapStateToProps = ({ city, error, weather }) => ({\n  city,\n  error,\n  weather,\n});\nexport default connect(mapStateToProps)(Search);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst Chart = ({ weather }) => {\n  return (\n    <div className=\"chart\">\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart\n          data={weather}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <XAxis dataKey=\"name\" />\n          <YAxis width={20} />\n          <Tooltip />\n          <Legend />\n          <Bar\n            dataKey=\"temperature\"\n            fill=\"#82ca9d\"\n            name=\"Temperature\"\n            barGap={200}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ weather }) => ({ weather });\nexport default connect(mapStateToProps)(Chart);\n","import React from \"react\";\nimport \"./App.css\";\nimport Search from \"./components/Search\";\nimport Chart from \"./components/Chart\";\nimport { connect } from \"react-redux\";\n\nfunction App({ weather }) {\n  return (\n    <div className=\"container\">\n      <Search />\n      {weather.length > 0 && <Chart />}\n    </div>\n  );\n}\nconst mapStateToProps = ({ weather }) => ({ weather });\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SET_CITY, SET_WEATHER, SET_ERROR, REMOVE_ERROR } from \"./actions\";\n\nconst initialState = {\n  city: \"\",\n  weather: [],\n  error: false,\n};\n\nexport const rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CITY:\n      return { ...state, city: action.city };\n    case SET_WEATHER:\n      return { ...state, weather: action.weather };\n    case SET_ERROR:\n      return { ...state, error: action.error };\n    case REMOVE_ERROR:\n      return { ...state, error: false };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore } from \"redux\";\nimport { rootReducer } from \"./redux/rootReducer\";\n\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}